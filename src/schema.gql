# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  appartament: String!
  comment: String
  house: String!
  street: String!
}

input AddressInput {
  appartament: String!
  comment: String
  house: String!
  street: String!
}

type BaseResponse {
  reason: String
  success: Boolean!
}

input CalculateDeliveryPackageDto {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input CalculateDeliveryPointDto {
  latitude: Float!
  longitude: Float!
}

type CalculateDeliveryResponse {
  options: [DeliveryOption!]!
  reason: String
  success: Boolean!
}

type CinemaOrder {
  _id: String!
  orderId: Float!
  phone: String!
  tickets: [Ticket!]!
}

input CinemaOrderInput {
  _id: String!
  orderId: Float!
  phone: String!
  tickets: [TicketInput!]!
}

input CinemaPersonInput {
  fullName: String!
  id: String!
  professions: [Profession!]!
}

type Country {
  code: String!
  code2: String!
  id: Float!
  name: String!
}

input CountryInput {
  code: String!
  code2: String!
  id: Float!
  name: String!
}

input CreateDeliveryOrderAddressDto {
  appartament: String!
  comment: String
  house: String!
  street: String!
}

input CreateDeliveryOrderDeliveryOptionDto {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

input CreateDeliveryOrderPersonDto {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input CreateDeliveryOrderPointDto {
  id: String!
  latitude: Float!
  longitude: String!
  name: String!
}

input CreatePaymentDebitCardDto {
  cvv: String!
  expireDate: String!
  pan: String!
}

input CreatePaymentPersonDto {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input CreatePaymentSeanceDto {
  date: String!
  time: String!
}

input CreatePaymentTicketsDto {
  column: Float!
  row: Float!
}

type DeliverResponse {
  order: Delivery!
  reason: String
  success: Boolean!
}

type DeliveriesResponse {
  deliveries: [Delivery!]!
  reason: String
  success: Boolean!
}

type Delivery {
  _id: String!
  payer: Payer!
  receiver: DeliveryPerson!
  receiverAddress: Address!
  receiverPoint: Point!
  sender: DeliveryPerson!
  senderAddress: Address!
  senderPoint: Point!
  status: DeliveryStatus!
}

input DeliveryInput {
  _id: String!
  payer: Payer!
  receiver: DeliveryPersonInput!
  receiverAddress: AddressInput!
  receiverPoint: PointInput!
  sender: DeliveryPersonInput!
  senderAddress: AddressInput!
  senderPoint: PointInput!
  status: DeliveryStatus!
}

type DeliveryOption {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

enum DeliveryOptionType {
  DEFAULT
  EXPRESS
}

input DeliveryOpttionInput {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

type DeliveryPerson {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input DeliveryPersonInput {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

type DeliveryResponse {
  delivery: Delivery!
  reason: String
  success: Boolean!
}

enum DeliveryStatus {
  CANCELED
  IN_PROCESSING
  SUCCESS
}

type Film {
  actors: [FilmPerson!]!
  ageRating: Rating!
  country: Country
  description: String!
  directors: [FilmPerson!]!
  genres: [String!]!
  id: String!
  img: String!
  name: String!
  originalName: String!
  releaseDate: String!
  runtime: Float!
  userRatings: FilmUserRaiting!
}

type FilmHall {
  name: String!
  places: [[FilmHallCell!]!]!
}

type FilmHallCell {
  price: Float!
  type: FilmHallCellType!
}

input FilmHallCellInput {
  price: Float!
  type: FilmHallCellType!
}

enum FilmHallCellType {
  BLOCKED
  COMFORT
  ECONOM
}

input FilmHallInput {
  name: String!
  places: [[FilmHallCellInput!]!]!
}

input FilmInput {
  actors: [CinemaPersonInput!]! = []
  ageRating: Rating!
  country: CountryInput
  description: String!
  directors: [CinemaPersonInput!]! = []
  genres: [String!]! = []
  id: String!
  img: String!
  name: String!
  originalName: String!
  releaseDate: String!
  runtime: Float!
  userRatings: FilmUserRaitingInput!
}

type FilmPerson {
  fullName: String!
  id: String!
  professions: [Profession!]!
}

type FilmResponse {
  film: Film!
  reason: String
  success: Boolean!
}

type FilmTicketSeance {
  date: String!
  time: String!
}

input FilmTicketSeanceInput {
  date: String!
  time: String!
}

type FilmUserRaiting {
  imdb: String!
  kinopoisk: String!
}

input FilmUserRaitingInput {
  imdb: String!
  kinopoisk: String!
}

type FilmsResponse {
  films: [Film!]!
  reason: String
  success: Boolean!
}

type Mutation {
  calculateDelivery(package: CalculateDeliveryPackageDto!, receiverPoint: CalculateDeliveryPointDto!, senderPoint: CalculateDeliveryPointDto!): CalculateDeliveryResponse!
  cancelDeliveryOrder(orderId: String!): BaseResponse!
  createCinemaPayment(debitCard: CreatePaymentDebitCardDto!, filmId: String!, person: CreatePaymentPersonDto!, seance: CreatePaymentSeanceDto!, tickets: CreatePaymentTicketsDto!): PaymentResponse!
  createDeliveryOrder(option: CreateDeliveryOrderDeliveryOptionDto!, payer: Payer!, receiver: CreateDeliveryOrderPersonDto!, receiverAddress: CreateDeliveryOrderAddressDto!, receiverPoint: CreateDeliveryOrderPointDto!, sender: CreateDeliveryOrderPersonDto!, senderAddress: CreateDeliveryOrderAddressDto!, senderPoint: CreateDeliveryOrderPointDto!): DeliverResponse!
  createOtp(phone: String!): OtpResponse!
  signIn(code: Float!, phone: String!): UserResponse!
}

type Otp {
  _id: String!
  code: Float!
  created: String!
  phone: String!
  retryDelay: Float!
}

input OtpInput {
  _id: String!
  code: Float!
  created: String!
  phone: String!
  retryDelay: Float!
}

type OtpResponse {
  reason: String
  retryDelay: Float!
  success: Boolean!
}

type PackageType {
  height: Float!
  id: String!
  length: Float!
  name: String!
  weight: Float!
  width: Float!
}

input PackageTypeInput {
  height: Float!
  id: String!
  length: Float!
  name: String!
  weight: Float!
  width: Float!
}

type PackageTypesResponse {
  packages: [PackageType!]!
  reason: String
  success: Boolean!
}

enum Payer {
  RECEIVER
  SENDER
}

type PaymentResponse {
  order: String!
  reason: String
  success: Boolean!
}

type Point {
  id: String!
  latitude: Float!
  longitude: String!
  name: String!
}

input PointInput {
  id: String!
  latitude: Float!
  longitude: String!
  name: String!
}

type PointsResponse {
  points: [Point!]!
  reason: String
  success: Boolean!
}

enum Profession {
  ACTOR
  DIRECTOR
}

type Query {
  getCinemaToday: FilmsResponse!
  getDeliveries: DeliveriesResponse!
  getDelivery(orderId: String!): DeliveryResponse!
  getDeliveryPackageTypes: PackageTypesResponse!
  getDeliveryPoints: PointsResponse!
  getFilm(filmId: String!): FilmResponse!
  getFilmSchedule(filmId: String!): ScheduleResponse!
  getOrders: TicketsResponse!
  getTickets: TicketsResponse!
  me: UserResponse!
}

enum Rating {
  G
  NC17
  PG
  PG13
  R
}

type Schedule {
  date: String!
  seances: [ScheduleSeance!]!
}

type ScheduleResponse {
  reason: String
  schedules: [Schedule!]!
  success: Boolean!
}

type ScheduleSeance {
  hall: FilmHall!
  payedTickets: [Ticket!]!
  time: String!
}

type Ticket {
  _id: String!
  column: Float!
  filmId: String!
  phone: String!
  row: Float!
  seance: FilmTicketSeance!
  status: TicketStatus!
}

input TicketInput {
  _id: String!
  column: Float!
  filmId: String!
  phone: String!
  row: Float!
  seance: FilmTicketSeanceInput!
  status: TicketStatus!
}

enum TicketStatus {
  CANCELED
  PAYED
}

type TicketsResponse {
  reason: String
  success: Boolean!
  tickets: [Ticket!]!
}

type User {
  _id: String!
  city: String!
  email: String!
  firstname: String!
  lastname: String!
  middlename: String!
  phone: String!
}

input UserInput {
  _id: String!
  city: String!
  email: String!
  firstname: String!
  lastname: String!
  middlename: String!
  phone: String!
}

type UserResponse {
  reason: String
  success: Boolean!
  user: User
}